#!/bin/bash

echo "üöÄ Starting Go Distributed Hashcat Server"
echo "========================================"

echo ""
echo "üìä Current Status:"
echo "------------------"
echo "‚úÖ Agent: RUNNING (job completed successfully)"
echo "‚ùå Server: OFFLINE (causing status update failure)"
echo ""

echo "üîß Starting Server..."
echo "===================="

# Check if Go is installed
if ! command -v go &> /dev/null; then
    echo "‚ùå Go is not installed. Please install Go first."
    exit 1
fi

# Check if we're in the right directory
if [ ! -f "go.mod" ]; then
    echo "‚ùå Not in go-distributed-hashcat directory"
    echo "   Please cd to the project directory first"
    exit 1
fi

echo "‚úÖ Go version: $(go version)"
echo "‚úÖ Project directory: $(pwd)"
echo ""

# Build the server
echo "üî® Building server..."
if go build -o server ./cmd/server; then
    echo "‚úÖ Server built successfully"
else
    echo "‚ùå Failed to build server"
    echo "   Check for compilation errors"
    exit 1
fi

# Check if config file exists
if [ ! -f "configs/config.yaml" ]; then
    echo "‚ö†Ô∏è  Config file not found, using defaults"
else
    echo "‚úÖ Config file found"
fi

# Start the server
echo ""
echo "üöÄ Starting server..."
echo "===================="

# Run server in background
./server &
SERVER_PID=$!

# Wait a moment for server to start
sleep 3

# Check if server is running
if kill -0 $SERVER_PID 2>/dev/null; then
    echo "‚úÖ Server started successfully (PID: $SERVER_PID)"
    echo "‚úÖ Server should be accessible at http://localhost:8080"
    
    # Test server health
    echo ""
    echo "üîç Testing server health..."
    if curl -s http://localhost:8080/health > /dev/null; then
        echo "‚úÖ Server health check: PASSED"
    else
        echo "‚ö†Ô∏è  Server health check: FAILED (might need more time to start)"
    fi
    
    echo ""
    echo "üìù Server Management:"
    echo "===================="
    echo "‚Ä¢ View logs: tail -f server.log"
    echo "‚Ä¢ Stop server: kill $SERVER_PID"
    echo "‚Ä¢ Check status: ps aux | grep server"
    echo "‚Ä¢ Test API: curl http://localhost:8080/health"
    
else
    echo "‚ùå Failed to start server"
    echo "   Check server logs for errors"
fi

echo ""
echo "‚úÖ Server startup script completed!"
